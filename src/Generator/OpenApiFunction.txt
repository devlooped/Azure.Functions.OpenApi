using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;

partial class OpenApi
{
    [FunctionName("openapi$suffix$")]
    public HttpResponseMessage Run$suffix$(
        [HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "$route$")] HttpRequestMessage req,
        Microsoft.Azure.WebJobs.ExecutionContext context)
    {
        if (Environment.GetEnvironmentVariable("ATTACH_DEBUGGER") is string debug &&
            bool.TryParse(debug, out var attach) && attach && !Debugger.IsAttached)
            Debugger.Launch();

        try
        {
            var relativePath = req.RequestUri!.PathAndQuery ?? "";
            var baseUrl = "$baseUrl$";
            if (baseUrl.Length > 0 && relativePath.StartsWith(baseUrl))
                relativePath = relativePath.Substring(baseUrl.Length);

            var filePath = Path.GetFullPath(Path.Combine(context.FunctionAppDirectory, relativePath.TrimStart('/')));
            var response = new HttpResponseMessage(HttpStatusCode.OK);
            var stream = new FileStream(filePath, FileMode.Open);
            response.Content = new StreamContent(stream);
            response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            return response;
        }
        catch
        {
            return new HttpResponseMessage(HttpStatusCode.NotFound);
        }
    }
}